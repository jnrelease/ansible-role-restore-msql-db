---
  - name: Install DBATools PowerShell module
    win_shell: |
      Install-Module -Name dbatools -Force -AllowClobber -Scope AllUsers
    args:
      executable: powershell.exe
    when: inventory_hostname == 'sqltest'

  - name: Create list of script names
    ansible.windows.win_find:
      paths: "{{ bak_path }}"
      patterns: "{{ file_pattern }}"
      hidden: true
      recurse: true
    when: inventory_hostname == 'sqltest'
    delegate_to: sqltest
    register: bak_files
    notify: DBScripts List

  - name: Define Variables
    set_fact:
      sql_server_instance: "{{ restore_server }}\\localhost"
    when: inventory_hostname == 'sqltest'

  - name: Restore Databases
    win_shell: |
      Import-Module dbatools
      $backupFolder = "{{ bak_path }}"
      $ServerInstance = "{{ sql_server_instance }}"
      $databaseFilesToRestore = {{ bak_files.files | map(attribute='path') | to_json | from_json | map('regex_replace', '^u', '') | join(', ') }}
      $databaseToRestore = {{ db_names | to_json }}
      
      $databaseArray = $databaseToRestore -split ','
      $databaseFilesArray = $databaseFilesToRestore -split ','

      foreach ($database in $databaseArray) {
        foreach ($databaseFileToRestore in $databaseFilesArray){
          if($databaseFileToRestore -contains $database){
            Restore-SqlDatabase -ServerInstance "$ServerInstance" -Database "$database" -BackupFile "$databaseFileToRestore"
          }
        }
      }
    args:
      executable: powershell.exe
    when: inventory_hostname == 'sqltest'
    notify: Restore Executed
  
  - name: Remove Backup Folder
    win_file:
      path: "{{ bak_path }}"
      state: absent
    when: inventory_hostname == 'sqltest'
    notify: Remove BackUpFolder
    

