---
# - name: Create restore folder
#   win_file:
#     path: '{{ res_path }}'
#     state: directory
#   when: inventory_hostname == 'sqltest'
#   delegate_to: sqltest
#   notify: RestoreFolder Created
#   ignore_errors: true
#   register: result2

# - name: Fetch files from remote backup folder
#   win_fetch:
#     src: '{{ bak_path }}'
#     dest: '{{ res_path }}'
#   flat: yes
#   when: inventory_hostname == 'sqltest'
#   delegate_to: sqltest
#   notify: RestoreFiles Copied
#   ignore_errors: true

- name: Generate SQL script from template
  template:
    src: ../templates/restore.sql.j2
    dest: "{{ bak_path }}\\ + 'restore.sql'"
  when: inventory_hostname == 'sqltest'
  delegate_to: sqltest
  notify: RestoreSQL Created

- name: Execute SQL script on database
  win_shell: |
    $SqlFile = "{{bak_path}}\\ + 'restore.sql'"
    $uid = 'ansible'
    $pwd = ConvertTo-SecureString -String  '{{ db_user_psw }}' -AsPlainText -Force
    $pwd.MakeReadOnly()
    $creds = New-Object System.Management.Automation.PSCredential $uid,$pwd
    $Password = $creds.GetNetworkCredential().Password

    Invoke-SqlCmd -InputFile $SqlFile -Username 'ansible' -Password $Password -ServerInstance 'SOADB03UAT\MSSQLSERVER' -Database 'master' -ConnectionTimeout 100 -QueryTimeout 300
  when: inventory_hostname == 'sqltest'
  delegate_to: sqltest
  register: sql_output
  notify: RestoreSQL Executed